# Predicting Sales on eBay


#Loading the Data
eBay = read.csv("ebayA.csv") 
table(eBay$sold)

Most common shoe size
table(eBay$size)

#Splitting into a Training and Testing Set

set.seed(144)
library(caTools)
spl = sample.split(eBay$sold, 0.7)
Train = subset(eBay, spl == TRUE)
Test = subset(eBay, spl == FALSE)

#Training a Logistic Regression Model

glmEbay = glm(sold~biddable + startprice + condition + heel + style + color + material, data=Train, family="binomial")
summary(glmEbay)

#Obtaining Test Set Predictions

glmpred = predict(glmEbay, newdata=Test, type="response")
table(Test$sold, glmpred >= 0.5)
table(Test$sold)

#Train CART Model

library(rpart)
library(rpart.plot)
CARTebay = rpart(sold ~ biddable+ startprice + condition + heel + style + color + material, data = Train, cp=0.005)
prp(CARTebay)

#Building a Corpus from Item Descriptions

library(tm)
corpusDescription = Corpus(VectorSource(eBay$description))
corpusDescription = tm_map(corpusDescription, tolower)
corpusDescription = tm_map(corpusDescription, PlainTextDocument)
corpusDescription = tm_map(corpusDescription, removePunctuation)
corpusDescription = tm_map(corpusDescription, removeWords, stopwords("english"))
corpusDescription = tm_map(corpusDescription, stemDocument)
dtmDescription = DocumentTermMatrix(corpusDescription)
str(dtmDescription)

#Removing Sparse Terms

spdtm = removeSparseTerms(dtmDescription, 0.9)
spdtm

#Evaluating Word Frequencies in a Corpus

spdtm = as.data.frame(as.matrix(spdtm))
DescriptionSparse = spdtm
colnames(DescriptionSparse) = make.names(colnames(DescriptionSparse))
sort(colSums(DescriptionSparse))

#Adding Data from Original Data Frame

colnames(spdtm) = paste0("D", colnames(spdtm))
spdtm$sold = eBay$sold
spdtm$biddable = eBay$biddable
spdtm$startprice = eBay$startprice
spdtm$condition = eBay$condition
spdtm$heel = eBay$heel
spdtm$style = eBay$style
spdtm$color = eBay$color
spdtm$material = eBay$material

spl = sample.split(spdtm$sold, 0.7)
trainText = subset(spdtm, spl == TRUE)
testText = subset(spdtm, spl == FALSE)
str(testText)

#Training Another Logistic Regression Model 

glmText = glm(sold~., data=trainText, family="binomial")
summary(glmText)

#Build the CART and Random Forest model with trainText. Give your output as prp tree and varImpPlot.



 
